{
  "context": {
    "intro": "A scalable Next.js web application leveraging modern technologies.",
    "key_terms": [
      "Next.js: React framework for web apps.",
      "TypeScript: Typed JavaScript superset.",
      "Tailwind CSS: Utility-first styling.",
      "Chakra UI: Accessible UI components.",
      "Framer Motion: React animations.",
      "Redis: In-memory data store.",
      "Cloudinary: Image & video CDN.",
      "EmailJS: Client-side email API.",
      "Axios: HTTP client.",
      "React Query: Data fetching & caching."
    ],
    "workflow": "Develop features, ensure security, optimize performance, and enhance UX."
  },
  "rules": [
    { "trigger": "specific_command", "response": "See docs/DOCUMENTATION.md > 'Development Guidelines'." },
    { "trigger": "another_command", "response": "See docs/DOCUMENTATION.md > 'Overview > Project Structure'." },
    { "trigger": "testing_command", "response": "See docs/DOCUMENTATION.md > 'Testing'." },
    { "trigger": "deployment_command", "response": "See docs/DOCUMENTATION.md > 'Overview > Installation'." },
    { "trigger": "installation_command", "response": "See docs/DOCUMENTATION.md > 'Overview > Installation'." },
    { "trigger": "feature_command", "response": "See docs/DOCUMENTATION.md > 'Overview > Key Features'." },
    { "trigger": "performance_command", "response": "See docs/DOCUMENTATION.md > 'Performance'." },
    { "trigger": "ui_command", "response": "See docs/DOCUMENTATION.md > 'UI/UX'." },
    { "trigger": "api_command", "response": "See docs/DOCUMENTATION.md > 'API and State Management'." },
    { "trigger": "refactoring_command", "response": "See docs/DOCUMENTATION.md > 'Development Guidelines'." },
    { "trigger": "build_issues_command", "response": "See docs/DOCUMENTATION.md > 'Troubleshooting'." },
    { "trigger": "documentation_command", "response": "See docs/DOCUMENTATION.md > 'AI Agent Guide'." }
  ],
  "docs": {
    "guidelines": [
      "Use Markdown format.",
      "Keep documentation clear and structured.",
      "Follow standard format from documentation index.",
      "If the documentation is not there, think through the project and come up with a plan to make one before making one.",
      "If it is a checklist or plan, directly checkoff each item on the list once completed and tested. Also add notes."
    ],
    "sections": {
      "Intro": "Brief project overview.",
      "Code Examples": "Use syntax highlighting.",
      "Testing": "Describe execution and success criteria.",
      "Best Practices": "Coding, testing, and documentation standards."
    },
    "changes_log": {
      "brief": "Date - File(s) changed - Short sentence summary.",
      "detailed": "Full summary and notes for each change."
    },
    "review": "Require review before merging changes.",
    "updates": "Update docs to reflect codebase changes.",
    "plans": {
      "description": "If a project plan is needed, generate one by analyzing the project details and save it as a file in the plans folder.",
      "file": "plans/plan.md"
    }
  },
  "tech": {
    "goal": "Build a secure, performant, and maintainable Next.js app.",
    "code_style": [
      "Use TypeScript for type safety.",
      "Favor functional programming.",
      "Follow DRY (Don't Repeat Yourself).",
      "Use descriptive names (isLoading, hasError).",
      "Organize files logically (components, utils, types).",
      "Use lowercase-dash directories (e.g., components/auth-wizard)."
    ],
    "optimization": [
      "Minimize 'use client' and 'useEffect'.",
      "Leverage React Server Components & SSR.",
      "Use dynamic imports for optimization.",
      "Adopt mobile-first responsive design.",
      "Optimize images (WebP, lazy loading, CDN)."
    ],
    "error_handling": [
      "Use guard clauses & early returns.",
      "Standardize error handling with custom types.",
      "Validate with schema-based tools (e.g., Zod)."
    ],
    "ui": [
      "Use Tailwind, Shadcn, or Radix.",
      "Maintain design consistency & accessibility."
    ],
    "state_mgmt": [
      "Use Zustand or React Query.",
      "Ensure stable & reusable data-fetching."
    ],
    "security_performance": [
      "Validate user input.",
      "Follow secure coding practices.",
      "Optimize with caching & lazy loading."
    ],
    "testing": [
      "Write unit tests (Jest, React Testing Library).",
      "Use comments & JSDoc for clarity.",
      "Document components & utilities."
    ],
    "methodology": [
      "Systematic Thinking: Step-by-step analysis.",
      "Evaluative Approach: Consider alternative solutions.",
      "Iterative Refinement: Optimize before finalizing."
    ],
    "environment": [
      "Tech Stack: ReactJS, Next.js, TypeScript, TailwindCSS."
    ],
    "implementation": [
      "Use early returns for readability.",
      "Only use Tailwind for styling.",
      "Use descriptive handlers (handleClick, handleKeyDown).",
      "Ensure accessibility (tabindex, aria-label).",
      "Define functions as const & use explicit types.",
      "No placeholders; ensure production readiness."
    ]
  }
}